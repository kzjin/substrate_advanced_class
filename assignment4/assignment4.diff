diff --git a/Cargo.lock b/Cargo.lock
index 29ea6e3..c06c802 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -121,6 +121,37 @@ dependencies = [
 ]
 
 [[package]]
+name = "alt_serde"
+version = "1.0.104"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "03beeddedd09889b96def26f78ba46e34ffd9bdaaa33b2c980cbaa1d0e762686"
+dependencies = [
+ "alt_serde_derive",
+]
+
+[[package]]
+name = "alt_serde_derive"
+version = "1.0.104"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6757ed5faa82ccfbfa1837cd7a7a2e1bdb634236f21fa74d6c5c5736152838a1"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "alt_serde_json"
+version = "1.0.61"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c8f0eb8296bb24f54901cbb46b675ce2d4e6099a47eea0024cf0f48068c70313"
+dependencies = [
+ "alt_serde",
+ "itoa",
+ "ryu",
+]
+
+[[package]]
 name = "ansi_term"
 version = "0.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -3546,6 +3577,7 @@ dependencies = [
  "pallet-aura",
  "pallet-balances",
  "pallet-grandpa",
+ "pallet-ocw-demo",
  "pallet-randomness-collective-flip",
  "pallet-sudo",
  "pallet-template",
@@ -3813,6 +3845,22 @@ dependencies = [
 ]
 
 [[package]]
+name = "pallet-ocw-demo"
+version = "2.0.1"
+dependencies = [
+ "alt_serde",
+ "alt_serde_json",
+ "frame-support",
+ "frame-system",
+ "parity-scale-codec",
+ "parking_lot 0.10.2",
+ "sp-core",
+ "sp-io",
+ "sp-runtime",
+ "sp-std",
+]
+
+[[package]]
 name = "pallet-randomness-collective-flip"
 version = "2.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
diff --git a/Cargo.toml b/Cargo.toml
index 188c6fd..2843109 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -3,7 +3,7 @@ panic = 'unwind'
 
 [workspace]
 members = [
-    'node',
-    'pallets/*',
-    'runtime',
+	'node',
+	'pallets/*',
+	'runtime',
 ]
diff --git a/node/src/service.rs b/node/src/service.rs
index dff7a39..d6ca8fd 100644
--- a/node/src/service.rs
+++ b/node/src/service.rs
@@ -3,7 +3,7 @@
 use std::sync::Arc;
 use std::time::Duration;
 use sc_client_api::{ExecutorProvider, RemoteBackend};
-use node_template_runtime::{self, opaque::Block, RuntimeApi};
+use node_template_runtime::{self as runtime, opaque::Block, RuntimeApi};
 use sc_service::{error::Error as ServiceError, Configuration, TaskManager};
 use sp_inherents::InherentDataProviders;
 use sc_executor::native_executor_instance;
@@ -43,6 +43,10 @@ pub fn new_partial(config: &Configuration) -> Result<sc_service::PartialComponen
 		sc_service::new_full_parts::<Block, RuntimeApi, Executor>(&config)?;
 	let client = Arc::new(client);
 
+	keystore.write().insert_ephemeral_from_seed_by_type::<runtime::pallet_ocw_demo::crypto::Pair>(
+		"//Alice", runtime::pallet_ocw_demo::KEY_TYPE
+	).expect("Creating key with account Alice should succeed.");
+
 	let select_chain = sc_consensus::LongestChain::new(backend.clone());
 
 	let transaction_pool = sc_transaction_pool::BasicPool::new_full(
diff --git a/pallets/ocw-demo/Cargo.toml b/pallets/ocw-demo/Cargo.toml
new file mode 100644
index 0000000..4ad3006
--- /dev/null
+++ b/pallets/ocw-demo/Cargo.toml
@@ -0,0 +1,43 @@
+[package]
+name = "pallet-ocw-demo"
+version = "2.0.1"
+edition = "2018"
+authors = ['Substrate DevHub <https://github.com/substrate-developer-hub>']
+repository = "https://github.com/substrate-developer-hub/recipes/"
+description = "A pallet that demonstrates many aspects of offchain workers"
+license = "GPL-3.0-or-later"
+
+[package.metadata.substrate]
+categories = [
+  "pallet",
+  "offchain worker",
+  "tutorial",
+  "recipe",
+]
+compatibility_version = "2.0.1"
+
+[dependencies]
+parity-scale-codec = { default-features = false, features = ['derive'], version = '1.3.0' }
+parking_lot = "0.10.0"
+serde = { package = "alt_serde", version = "1", default-features = false, features = ["derive"] }
+serde_json = { package = "alt_serde_json", version = "1", default-features = false, features = ["alloc"] }
+
+# Substrate packages
+
+frame-support = { version = '2.0.1', default-features = false }
+frame-system = { version = '2.0.1', default-features = false }
+sp-core = { version = '2.0.1', default-features = false }
+sp-io = { version = '2.0.1', default-features = false }
+sp-runtime = { version = '2.0.1', default-features = false }
+sp-std = { version = '2.0.1', default-features = false }
+
+[features]
+default = ['std']
+std = [
+  'frame-support/std',
+  'frame-system/std',
+  'parity-scale-codec/std',
+  'sp-io/std',
+  'sp-runtime/std',
+  'sp-std/std',
+]
diff --git a/pallets/ocw-demo/src/lib.rs b/pallets/ocw-demo/src/lib.rs
new file mode 100644
index 0000000..ae411a5
--- /dev/null
+++ b/pallets/ocw-demo/src/lib.rs
@@ -0,0 +1,470 @@
+//! A demonstration of an offchain worker that sends onchain callbacks
+
+#![cfg_attr(not(feature = "std"), no_std)]
+
+#[cfg(test)]
+mod tests;
+
+use core::{convert::TryInto, fmt};
+use frame_support::{
+	debug, decl_error, decl_event, decl_module, decl_storage, dispatch::DispatchResult,
+};
+use parity_scale_codec::{Decode, Encode};
+
+use frame_system::{
+	self as system, ensure_none, ensure_signed,
+	offchain::{
+		AppCrypto, CreateSignedTransaction, SendSignedTransaction, SendUnsignedTransaction,
+		SignedPayload, SigningTypes, Signer, SubmitTransaction,
+	},
+};
+use sp_core::crypto::KeyTypeId;
+use sp_runtime::{
+	RuntimeDebug,
+	offchain as rt_offchain,
+	offchain::{
+		storage::StorageValueRef,
+		storage_lock::{StorageLock, BlockAndTime},
+	},
+	transaction_validity::{
+		InvalidTransaction, TransactionSource, TransactionValidity,
+		ValidTransaction,
+	},
+};
+use sp_std::{
+	prelude::*, str,
+	collections::vec_deque::VecDeque,
+};
+
+use serde::{Deserialize, Deserializer};
+
+/// Defines application identifier for crypto keys of this module.
+///
+/// Every module that deals with signatures needs to declare its unique identifier for
+/// its crypto keys.
+/// When an offchain worker is signing transactions it's going to request keys from type
+/// `KeyTypeId` via the keystore to sign the transaction.
+/// The keys can be inserted manually via RPC (see `author_insertKey`).
+pub const KEY_TYPE: KeyTypeId = KeyTypeId(*b"demo");
+pub const PRICE_VEC_LEN: usize = 10;
+/// The type to sign and send transactions.
+pub const UNSIGNED_TXS_PRIORITY: u64 = 100;
+
+// We are fetching dot price information
+pub const HTTP_REMOTE_REQUEST: &str = "https://api.coincap.io/v2/assets/polkadot";
+
+pub const FETCH_TIMEOUT_PERIOD: u64 = 3000; // in milli-seconds
+pub const LOCK_TIMEOUT_EXPIRATION: u64 = FETCH_TIMEOUT_PERIOD + 1000; // in milli-seconds
+pub const LOCK_BLOCK_EXPIRATION: u32 = 3; // in block number
+
+/// Based on the above `KeyTypeId` we need to generate a pallet-specific crypto type wrapper.
+/// We can utilize the supported crypto kinds (`sr25519`, `ed25519` and `ecdsa`) and augment
+/// them with the pallet-specific identifier.
+pub mod crypto {
+	use crate::KEY_TYPE;
+	use sp_core::sr25519::Signature as Sr25519Signature;
+	use sp_runtime::app_crypto::{app_crypto, sr25519};
+	use sp_runtime::{
+		traits::Verify,
+		MultiSignature, MultiSigner,
+	};
+
+	app_crypto!(sr25519, KEY_TYPE);
+
+	pub struct TestAuthId;
+	// implemented for ocw-runtime
+	impl frame_system::offchain::AppCrypto<MultiSigner, MultiSignature> for TestAuthId {
+		type RuntimeAppPublic = Public;
+		type GenericSignature = sp_core::sr25519::Signature;
+		type GenericPublic = sp_core::sr25519::Public;
+	}
+
+	// implemented for mock runtime in test
+	impl frame_system::offchain::AppCrypto<<Sr25519Signature as Verify>::Signer, Sr25519Signature>
+		for TestAuthId
+	{
+		type RuntimeAppPublic = Public;
+		type GenericSignature = sp_core::sr25519::Signature;
+		type GenericPublic = sp_core::sr25519::Public;
+	}
+}
+
+#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
+pub struct Payload<Public> {
+	price: Vec<u8>,
+	public: Public
+}
+
+impl <T: SigningTypes> SignedPayload<T> for Payload<T::Public> {
+	fn public(&self) -> T::Public {
+		self.public.clone()
+	}
+}
+
+#[derive(Deserialize, Encode, Decode, Default)]
+struct DotPriceInfo {
+	// Specify our own deserializing function to convert JSON string to vector of bytes
+	#[serde(deserialize_with = "de_string_to_bytes")]
+	priceUsd: Vec<u8>,
+}
+
+// ref: https://serde.rs/container-attrs.html#crate
+#[derive(Deserialize, Encode, Decode, Default)]
+struct DotDataInfo {
+	// Specify our own deserializing function to convert JSON string to vector of bytes
+	data: DotPriceInfo,
+}
+
+pub fn de_string_to_bytes<'de, D>(de: D) -> Result<Vec<u8>, D::Error>
+where
+	D: Deserializer<'de>,
+{
+	let s: &str = Deserialize::deserialize(de)?;
+	Ok(s.as_bytes().to_vec())
+}
+
+impl fmt::Debug for DotPriceInfo {
+	// `fmt` converts the vector of bytes inside the struct back to string for
+	//   more friendly display.
+	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
+		write!(
+			f,
+			"{{ priceUsd: {} }}",
+			str::from_utf8(&self.priceUsd).map_err(|_| fmt::Error)?,
+		)
+	}
+}
+
+/// This is the pallet's configuration trait
+pub trait Trait: system::Trait + CreateSignedTransaction<Call<Self>> {
+	/// The identifier type for an offchain worker.
+	type AuthorityId: AppCrypto<Self::Public, Self::Signature>;
+	/// The overarching dispatch call type.
+	type Call: From<Call<Self>>;
+	/// The overarching event type.
+	type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;
+}
+
+decl_storage! {
+	trait Store for Module<T: Trait> as Example {
+		/// A vector of recently submitted prices. Bounded by NUM_VEC_LEN
+		Prices get(fn prices): VecDeque<Vec<u8>>;
+	}
+}
+
+decl_event!(
+	/// Events generated by the module.
+	pub enum Event<T>
+	where
+		AccountId = <T as system::Trait>::AccountId,
+	{
+		/// Event generated when a new number is accepted to contribute to the average.
+		NewPrice(Option<AccountId>, Vec<u8>),
+	}
+);
+
+decl_error! {
+	pub enum Error for Module<T: Trait> {
+		// Error returned when not sure which ocw function to executed
+		UnknownOffchainMux,
+
+		// Error returned when making signed transactions in off-chain worker
+		NoLocalAcctForSigning,
+		OffchainSignedTxError,
+
+		// Error returned when making unsigned transactions in off-chain worker
+		OffchainUnsignedTxError,
+
+		// Error returned when making unsigned transactions with signed payloads in off-chain worker
+		OffchainUnsignedTxSignedPayloadError,
+
+		// Error returned when fetching dot price info
+		HttpFetchingError,
+		PriceFetchingError,
+	}
+}
+
+decl_module! {
+	pub struct Module<T: Trait> for enum Call where origin: T::Origin {
+		fn deposit_event() = default;
+
+		#[weight = 10000]
+		pub fn submit_price_signed(origin, price: Vec<u8>) -> DispatchResult {
+			let who = ensure_signed(origin)?;
+			debug::info!("submit_price_signed: ({:?}, {:?})", price, who);
+			Self::append_or_replace_price(price.clone());
+
+			Self::deposit_event(RawEvent::NewPrice(Some(who), price));
+			Ok(())
+		}
+
+		#[weight = 10000]
+		pub fn submit_price_unsigned(origin, price: Vec<u8>) -> DispatchResult {
+			let _ = ensure_none(origin)?;
+			debug::info!("submit_price_unsigned: {:?}", price);
+			Self::append_or_replace_price(price.clone());
+
+			Self::deposit_event(RawEvent::NewPrice(None, price));
+			Ok(())
+		}
+
+		#[weight = 10000]
+		pub fn submit_price_unsigned_with_signed_payload(origin, payload: Payload<T::Public>,
+			_signature: T::Signature) -> DispatchResult
+		{
+			let _ = ensure_none(origin)?;
+			// we don't need to verify the signature here because it has been verified in
+			//   `validate_unsigned` function when sending out the unsigned tx.
+			let Payload { price, public } = payload;
+			debug::info!("submit_price_unsigned_with_signed_payload: ({:?}, {:?})", price, public);
+			Self::append_or_replace_price(price.clone());
+
+			Self::deposit_event(RawEvent::NewPrice(None, price));
+			Ok(())
+		}
+
+		fn offchain_worker(block_number: T::BlockNumber) {
+			debug::info!("Entering off-chain worker");
+
+			const TX_TYPES: usize = 2;
+			let modu = block_number.try_into().map_or(TX_TYPES, |bn: usize| bn % TX_TYPES);
+			let result = match modu {
+				0 => Self::fetch_dot_price_info(),
+				// !!!!!!
+				// Use unsigned transaction with signed payload:
+				// because the sender account is not charged for the transaction fee
+				// and the sender is specified
+				1 => Self::offchain_unsigned_tx_signed_payload(),
+				_ => Err(Error::<T>::UnknownOffchainMux),
+			};
+
+			if let Err(e) = result {
+				debug::error!("offchain_worker error: {:?}", e);
+			}
+		}
+	}
+}
+
+impl<T: Trait> Module<T> {
+	/// Append a new number to the tail of the list, removing an element from the head if reaching
+	///   the bounded length.
+	fn append_or_replace_price(price: Vec<u8>) {
+		Prices::mutate(|prices| {
+			if prices.len() == PRICE_VEC_LEN {
+				let _ = prices.pop_front();
+			}
+			prices.push_back(price);
+			debug::info!("Price vector: {:?}", prices);
+		});
+	}
+
+	/// Check if we have fetched dot price info before. If yes, we can use the cached version
+	///   stored in off-chain worker storage `storage`. If not, we fetch the remote info and
+	///   write the info into the storage for future retrieval.
+	fn fetch_dot_price_info() -> Result<(), Error<T>> {
+		// Create a reference to Local Storage value.
+		// Since the local storage is common for all offchain workers, it's a good practice
+		// to prepend our entry with the pallet name.
+		let s_info = StorageValueRef::persistent(b"offchain-demo::dot-price");
+
+		// Since off-chain storage can be accessed by off-chain workers from multiple runs, it is important to lock
+		//   it before doing heavy computations or write operations.
+		// ref: https://substrate.dev/rustdocs/v2.0.0-rc3/sp_runtime/offchain/storage_lock/index.html
+		//
+		// There are four ways of defining a lock:
+		//   1) `new` - lock with default time and block exipration
+		//   2) `with_deadline` - lock with default block but custom time expiration
+		//   3) `with_block_deadline` - lock with default time but custom block expiration
+		//   4) `with_block_and_time_deadline` - lock with custom time and block expiration
+		// Here we choose the most custom one for demonstration purpose.
+		let mut lock = StorageLock::<BlockAndTime<Self>>::with_block_and_time_deadline(
+			b"offchain-demo::lock", LOCK_BLOCK_EXPIRATION,
+			rt_offchain::Duration::from_millis(LOCK_TIMEOUT_EXPIRATION)
+		);
+
+		// We try to acquire the lock here. If failed, we know the `fetch_n_parse` part inside is being
+		//   executed by previous run of ocw, so the function just returns.
+		// ref: https://substrate.dev/rustdocs/v2.0.0/sp_runtime/offchain/storage_lock/struct.StorageLock.html#method.try_lock
+		if let Ok(_guard) = lock.try_lock() {
+			match Self::fetch_n_parse() {
+				Ok(price_info) => { s_info.set(&price_info.priceUsd); }
+				Err(err) => { return Err(err); }
+			}
+		}
+		Ok(())
+	}
+
+	/// Fetch from remote and deserialize the JSON to a struct
+	fn fetch_n_parse() -> Result<DotPriceInfo, Error<T>> {
+		let resp_bytes = Self::fetch_from_remote().map_err(|e| {
+			debug::error!("fetch_from_remote error: {:?}", e);
+			<Error<T>>::HttpFetchingError
+		})?;
+
+		let resp_str = str::from_utf8(&resp_bytes).map_err(|_| <Error<T>>::HttpFetchingError)?;
+		// Print out our fetched JSON string
+		debug::info!("{}", resp_str);
+
+		// Deserializing JSON to struct, thanks to `serde` and `serde_derive`
+		let dot_info: DotDataInfo =
+			serde_json::from_str(&resp_str).map_err(|_| <Error<T>>::HttpFetchingError)?;
+		Ok(dot_info.data)
+	}
+
+	fn fetch_last_price() -> Result<DotPriceInfo, Error<T>> {
+		let s_info = StorageValueRef::persistent(b"offchain-demo::dot-price");
+
+		if let Some(Some(price_info)) = s_info.get::<DotPriceInfo>() {
+			debug::info!("cached dot-price-info: {:?}", price_info);
+			return Ok(price_info);
+		}
+
+		Err(<Error<T>>::HttpFetchingError)
+	}
+
+	/// This function uses the `offchain::http` API to query the remote github information,
+	///   and returns the JSON response as vector of bytes.
+	fn fetch_from_remote() -> Result<Vec<u8>, Error<T>> {
+		debug::info!("sending request to: {}", HTTP_REMOTE_REQUEST);
+
+		// Initiate an external HTTP GET request. This is using high-level wrappers from `sp_runtime`.
+		let request = rt_offchain::http::Request::get(HTTP_REMOTE_REQUEST);
+
+		// Keeping the offchain worker execution time reasonable, so limiting the call to be within 3s.
+		let timeout = sp_io::offchain::timestamp()
+			.add(rt_offchain::Duration::from_millis(FETCH_TIMEOUT_PERIOD));
+
+		let pending = request
+			.deadline(timeout) // Setting the timeout time
+			.send() // Sending the request out by the host
+			.map_err(|_| <Error<T>>::HttpFetchingError)?;
+
+		// By default, the http request is async from the runtime perspective. So we are asking the
+		//   runtime to wait here.
+		// The returning value here is a `Result` of `Result`, so we are unwrapping it twice by two `?`
+		//   ref: https://substrate.dev/rustdocs/v2.0.0/sp_runtime/offchain/http/struct.PendingRequest.html#method.try_wait
+		let response = pending
+			.try_wait(timeout)
+			.map_err(|_| <Error<T>>::HttpFetchingError)?
+			.map_err(|_| <Error<T>>::HttpFetchingError)?;
+
+		if response.code != 200 {
+			debug::error!("Unexpected http request status code: {}", response.code);
+			return Err(<Error<T>>::HttpFetchingError);
+		}
+
+		// Next we fully read the response body and collect it to a vector of bytes.
+		Ok(response.body().collect::<Vec<u8>>())
+	}
+
+	fn offchain_signed_tx() -> Result<(), Error<T>> {
+		// We retrieve a signer and check if it is valid.
+		//   Since this pallet only has one key in the keystore. We use `any_account()1 to
+		//   retrieve it. If there are multiple keys and we want to pinpoint it, `with_filter()` can be chained,
+		//   ref: https://substrate.dev/rustdocs/v2.0.0/frame_system/offchain/struct.Signer.html
+		let signer = Signer::<T, T::AuthorityId>::any_account();
+		let price = Self::fetch_last_price().map_err(|e| {
+			debug::error!("fetch_last_price error: {:?}", e);
+			<Error<T>>::PriceFetchingError
+		})?;
+
+		// `result` is in the type of `Option<(Account<T>, Result<(), ()>)>`. It is:
+		//   - `None`: no account is available for sending transaction
+		//   - `Some((account, Ok(())))`: transaction is successfully sent
+		//   - `Some((account, Err(())))`: error occured when sending the transaction
+		let result = signer.send_signed_transaction(|_acct|
+			// This is the on-chain function
+			Call::submit_price_signed(price.priceUsd.clone())
+		);
+
+		// Display error if the signed tx fails.
+		if let Some((acc, res)) = result {
+			if res.is_err() {
+				debug::error!("failure: offchain_signed_tx: tx sent: {:?}", acc.id);
+				return Err(<Error<T>>::OffchainSignedTxError);
+			}
+			// Transaction is sent successfully
+			return Ok(());
+		}
+
+		// The case of `None`: no account is available for sending
+		debug::error!("No local account available");
+		Err(<Error<T>>::NoLocalAcctForSigning)
+	}
+
+	fn offchain_unsigned_tx() -> Result<(), Error<T>> {
+		let price = Self::fetch_last_price().map_err(|e| {
+			debug::error!("fetch_last_price error: {:?}", e);
+			<Error<T>>::PriceFetchingError
+		})?;
+
+		let call = Call::submit_price_unsigned(price.priceUsd);
+
+		// `submit_unsigned_transaction` returns a type of `Result<(), ()>`
+		//   ref: https://substrate.dev/rustdocs/v2.0.0/frame_system/offchain/struct.SubmitTransaction.html#method.submit_unsigned_transaction
+		SubmitTransaction::<T, Call<T>>::submit_unsigned_transaction(call.into())
+			.map_err(|_| {
+				debug::error!("Failed in offchain_unsigned_tx");
+				<Error<T>>::OffchainUnsignedTxError
+			})
+	}
+
+	fn offchain_unsigned_tx_signed_payload() -> Result<(), Error<T>> {
+		// Retrieve the signer to sign the payload
+		let signer = Signer::<T, T::AuthorityId>::any_account();
+		let price = Self::fetch_last_price().map_err(|e| {
+			debug::error!("fetch_last_price error: {:?}", e);
+			<Error<T>>::PriceFetchingError
+		})?;
+
+		// `send_unsigned_transaction` is returning a type of `Option<(Account<T>, Result<(), ()>)>`.
+		//   Similar to `send_signed_transaction`, they account for:
+		//   - `None`: no account is available for sending transaction
+		//   - `Some((account, Ok(())))`: transaction is successfully sent
+		//   - `Some((account, Err(())))`: error occured when sending the transaction
+		if let Some((_, res)) = signer.send_unsigned_transaction(
+			|acct| Payload { price: price.priceUsd.clone(), public: acct.public.clone() },
+			Call::submit_price_unsigned_with_signed_payload
+		) {
+			return res.map_err(|_| {
+				debug::error!("Failed in offchain_unsigned_tx_signed_payload");
+				<Error<T>>::OffchainUnsignedTxSignedPayloadError
+			});
+		}
+
+		// The case of `None`: no account is available for sending
+		debug::error!("No local account available");
+		Err(<Error<T>>::NoLocalAcctForSigning)
+	}
+}
+
+impl<T: Trait> frame_support::unsigned::ValidateUnsigned for Module<T> {
+	type Call = Call<T>;
+
+	fn validate_unsigned(_source: TransactionSource, call: &Self::Call) -> TransactionValidity {
+		let valid_tx = |provide| ValidTransaction::with_tag_prefix("ocw-demo")
+			.priority(UNSIGNED_TXS_PRIORITY)
+			.and_provides([&provide])
+			.longevity(3)
+			.propagate(true)
+			.build();
+
+		match call {
+			Call::submit_price_unsigned(_price) => valid_tx(b"submit_number_unsigned".to_vec()),
+			Call::submit_price_unsigned_with_signed_payload(ref payload, ref signature) => {
+				if !SignedPayload::<T>::verify::<T::AuthorityId>(payload, signature.clone()) {
+					return InvalidTransaction::BadProof.into();
+				}
+				valid_tx(b"submit_number_unsigned_with_signed_payload".to_vec())
+			},
+			_ => InvalidTransaction::Call.into(),
+		}
+	}
+}
+
+impl<T: Trait> rt_offchain::storage_lock::BlockNumberProvider for Module<T> {
+	type BlockNumber = T::BlockNumber;
+	fn current_block_number() -> Self::BlockNumber {
+	  <frame_system::Module<T>>::block_number()
+	}
+}
diff --git a/pallets/ocw-demo/src/tests.rs b/pallets/ocw-demo/src/tests.rs
new file mode 100644
index 0000000..d0d3c7c
--- /dev/null
+++ b/pallets/ocw-demo/src/tests.rs
@@ -0,0 +1,216 @@
+use crate::*;
+use frame_support::{assert_ok, impl_outer_event, impl_outer_origin, parameter_types};
+use parity_scale_codec::{alloc::sync::Arc, Decode};
+use parking_lot::RwLock;
+use sp_core::{
+	offchain::{
+		testing::{self, OffchainState, PoolState},
+		OffchainExt, TransactionPoolExt,
+	},
+	sr25519::{self, Signature},
+	testing::KeyStore,
+	traits::KeystoreExt,
+	H256,
+};
+use sp_io::TestExternalities;
+use sp_runtime::{
+	testing::{Header, TestXt},
+	traits::{BlakeTwo256, IdentityLookup, Verify},
+	Perbill,
+};
+
+use crate as ocw_demo;
+
+impl_outer_origin! {
+	pub enum Origin for TestRuntime where system = system {}
+}
+
+impl_outer_event! {
+	pub enum TestEvent for TestRuntime {
+		system<T>,
+		ocw_demo<T>,
+	}
+}
+
+#[derive(Clone, PartialEq, Eq, Debug)]
+pub struct TestRuntime;
+
+parameter_types! {
+	pub const BlockHashCount: u64 = 250;
+	pub const MaximumBlockWeight: u32 = 1_000_000;
+	pub const MaximumBlockLength: u32 = 10 * 1_000_000;
+	pub const AvailableBlockRatio: Perbill = Perbill::one();
+}
+
+// The TestRuntime implements two pallet/frame traits: system, and simple_event
+impl system::Trait for TestRuntime {
+	type BaseCallFilter = ();
+	type Origin = Origin;
+	type Index = u64;
+	type Call = ();
+	type BlockNumber = u64;
+	type Hash = H256;
+	type Hashing = BlakeTwo256;
+	type AccountId = sr25519::Public;
+	type Lookup = IdentityLookup<Self::AccountId>;
+	type Header = Header;
+	type Event = TestEvent;
+	type BlockHashCount = BlockHashCount;
+	type MaximumBlockWeight = MaximumBlockWeight;
+	type DbWeight = ();
+	type BlockExecutionWeight = ();
+	type ExtrinsicBaseWeight = ();
+	type MaximumExtrinsicWeight = MaximumBlockWeight;
+	type MaximumBlockLength = MaximumBlockLength;
+	type AvailableBlockRatio = AvailableBlockRatio;
+	type Version = ();
+	type PalletInfo = ();
+	type AccountData = ();
+	type OnNewAccount = ();
+	type OnKilledAccount = ();
+	type SystemWeightInfo = ();
+}
+
+// --- mocking offchain-demo trait
+
+type TestExtrinsic = TestXt<Call<TestRuntime>, ()>;
+
+parameter_types! {
+	pub const UnsignedPriority: u64 = 100;
+}
+
+impl Trait for TestRuntime {
+	type AuthorityId = crypto::TestAuthId;
+	type Call = Call<TestRuntime>;
+	type Event = TestEvent;
+}
+
+impl<LocalCall> system::offchain::CreateSignedTransaction<LocalCall> for TestRuntime
+where
+	Call<TestRuntime>: From<LocalCall>,
+{
+	fn create_transaction<C: frame_system::offchain::AppCrypto<Self::Public, Self::Signature>>(
+		call: Call<TestRuntime>,
+		_public: <Signature as Verify>::Signer,
+		_account: <TestRuntime as system::Trait>::AccountId,
+		index: <TestRuntime as system::Trait>::Index,
+	) -> Option<(
+		Call<TestRuntime>,
+		<TestExtrinsic as sp_runtime::traits::Extrinsic>::SignaturePayload,
+	)> {
+		Some((call, (index, ())))
+	}
+}
+
+impl frame_system::offchain::SigningTypes for TestRuntime {
+	type Public = <Signature as Verify>::Signer;
+	type Signature = Signature;
+}
+
+impl<C> frame_system::offchain::SendTransactionTypes<C> for TestRuntime
+where
+	Call<TestRuntime>: From<C>,
+{
+	type OverarchingCall = Call<TestRuntime>;
+	type Extrinsic = TestExtrinsic;
+}
+
+pub type System = system::Module<TestRuntime>;
+pub type OcwDemo = Module<TestRuntime>;
+
+struct ExternalityBuilder;
+
+impl ExternalityBuilder {
+	pub fn build() -> (
+		TestExternalities,
+		Arc<RwLock<PoolState>>,
+		Arc<RwLock<OffchainState>>,
+	) {
+		const PHRASE: &str =
+			"expire stage crawl shell boss any story swamp skull yellow bamboo copy";
+
+		let (offchain, offchain_state) = testing::TestOffchainExt::new();
+		let (pool, pool_state) = testing::TestTransactionPoolExt::new();
+		let keystore = KeyStore::new();
+		keystore
+			.write()
+			.sr25519_generate_new(KEY_TYPE, Some(&format!("{}/hunter1", PHRASE)))
+			.unwrap();
+
+		let storage = system::GenesisConfig::default()
+			.build_storage::<TestRuntime>()
+			.unwrap();
+
+		let mut t = TestExternalities::from(storage);
+		t.register_extension(OffchainExt::new(offchain));
+		t.register_extension(TransactionPoolExt::new(pool));
+		t.register_extension(KeystoreExt(keystore));
+		t.execute_with(|| System::set_block_number(1));
+		(t, pool_state, offchain_state)
+	}
+}
+
+#[test]
+fn submit_number_signed_works() {
+	let (mut t, _, _) = ExternalityBuilder::build();
+	t.execute_with(|| {
+		// call submit_number_signed
+		let num = 32;
+		//todo: "29.12345678".as_bytes().to_vec()
+		let acct: <TestRuntime as system::Trait>::AccountId = Default::default();
+		assert_ok!(OcwDemo::submit_number_signed(
+			Origin::signed(acct),
+			num
+		));
+		// A number is inserted to <Numbers> vec
+		assert_eq!(<Numbers>::get(), vec![num]);
+		// An event is emitted
+		assert!(System::events()
+			.iter()
+			.any(|er| er.event == TestEvent::ocw_demo(RawEvent::NewNumber(Some(acct), num))));
+
+		// Insert another number
+		let num2 = num * 2;
+		assert_ok!(OcwDemo::submit_number_signed(
+			Origin::signed(acct),
+			num2
+		));
+		// A number is inserted to <Numbers> vec
+		assert_eq!(<Numbers>::get(), vec![num, num2]);
+	});
+}
+
+#[test]
+fn test_offchain_signed_tx() {
+	let (mut t, pool_state, _offchain_state) = ExternalityBuilder::build();
+
+	t.execute_with(|| {
+		// Setup
+		let num = 32;
+		OcwDemo::offchain_signed_tx(num).unwrap();
+
+		// Verify
+		let tx = pool_state.write().transactions.pop().unwrap();
+		assert!(pool_state.read().transactions.is_empty());
+		let tx = TestExtrinsic::decode(&mut &*tx).unwrap();
+		assert_eq!(tx.signature.unwrap().0, 0);
+		assert_eq!(tx.call, Call::submit_number_signed(num));
+	});
+}
+
+#[test]
+fn test_offchain_unsigned_tx() {
+	let (mut t, pool_state, _offchain_state) = ExternalityBuilder::build();
+
+	t.execute_with(|| {
+		// when
+		let num = 32;
+		OcwDemo::offchain_unsigned_tx(num).unwrap();
+		// then
+		let tx = pool_state.write().transactions.pop().unwrap();
+		assert!(pool_state.read().transactions.is_empty());
+		let tx = TestExtrinsic::decode(&mut &*tx).unwrap();
+		assert_eq!(tx.signature, None);
+		assert_eq!(tx.call, Call::submit_number_unsigned(num));
+	});
+}
diff --git a/runtime/Cargo.toml b/runtime/Cargo.toml
index e34ee3e..0bc3a78 100644
--- a/runtime/Cargo.toml
+++ b/runtime/Cargo.toml
@@ -26,6 +26,7 @@ serde = { features = ['derive'], optional = true, version = '1.0.119' }
 
 # local dependencies
 pallet-template = { path = '../pallets/template', default-features = false, version = '2.0.1' }
+pallet-ocw-demo = { path = '../pallets/ocw-demo', default-features = false, version = '2.0.1' }
 
 # Substrate dependencies
 frame-benchmarking = { default-features = false, optional = true, version = '2.0.1' }
@@ -57,40 +58,41 @@ sp-version = { default-features = false, version = '2.0.1' }
 [features]
 default = ['std']
 runtime-benchmarks = [
-    'hex-literal',
-    'frame-benchmarking',
-    'frame-support/runtime-benchmarks',
-    'frame-system-benchmarking',
-    'frame-system/runtime-benchmarks',
-    'pallet-balances/runtime-benchmarks',
-    'pallet-timestamp/runtime-benchmarks',
-    'sp-runtime/runtime-benchmarks',
+	'hex-literal',
+	'frame-benchmarking',
+	'frame-support/runtime-benchmarks',
+	'frame-system-benchmarking',
+	'frame-system/runtime-benchmarks',
+	'pallet-balances/runtime-benchmarks',
+	'pallet-timestamp/runtime-benchmarks',
+	'sp-runtime/runtime-benchmarks',
 ]
 std = [
-    'codec/std',
-    'serde',
-    'frame-executive/std',
-    'frame-support/std',
-    'frame-system/std',
-    'frame-system-rpc-runtime-api/std',
-    'pallet-aura/std',
-    'pallet-balances/std',
-    'pallet-grandpa/std',
-    'pallet-randomness-collective-flip/std',
-    'pallet-sudo/std',
-    'pallet-template/std',
-    'pallet-timestamp/std',
-    'pallet-transaction-payment/std',
-    'pallet-transaction-payment-rpc-runtime-api/std',
-    'sp-api/std',
-    'sp-block-builder/std',
-    'sp-consensus-aura/std',
-    'sp-core/std',
-    'sp-inherents/std',
-    'sp-offchain/std',
-    'sp-runtime/std',
-    'sp-session/std',
-    'sp-std/std',
-    'sp-transaction-pool/std',
-    'sp-version/std',
+	'codec/std',
+	'serde',
+	'frame-executive/std',
+	'frame-support/std',
+	'frame-system/std',
+	'frame-system-rpc-runtime-api/std',
+	'pallet-aura/std',
+	'pallet-balances/std',
+	'pallet-grandpa/std',
+	'pallet-ocw-demo/std',
+	'pallet-randomness-collective-flip/std',
+	'pallet-sudo/std',
+	'pallet-template/std',
+	'pallet-timestamp/std',
+	'pallet-transaction-payment/std',
+	'pallet-transaction-payment-rpc-runtime-api/std',
+	'sp-api/std',
+	'sp-block-builder/std',
+	'sp-consensus-aura/std',
+	'sp-core/std',
+	'sp-inherents/std',
+	'sp-offchain/std',
+	'sp-runtime/std',
+	'sp-session/std',
+	'sp-std/std',
+	'sp-transaction-pool/std',
+	'sp-version/std',
 ]
diff --git a/runtime/build.rs b/runtime/build.rs
index 9dcfddb..203d775 100644
--- a/runtime/build.rs
+++ b/runtime/build.rs
@@ -1,9 +1,9 @@
 use substrate_wasm_builder::WasmBuilder;
 
 fn main() {
-    WasmBuilder::new()
-        .with_current_project()
-        .import_memory()
-        .export_heap_base()
-        .build()
+	WasmBuilder::new()
+		.with_current_project()
+		.import_memory()
+		.export_heap_base()
+		.build()
 }
diff --git a/runtime/src/lib.rs b/runtime/src/lib.rs
index 714c0c9..716c4d2 100644
--- a/runtime/src/lib.rs
+++ b/runtime/src/lib.rs
@@ -7,13 +7,14 @@
 include!(concat!(env!("OUT_DIR"), "/wasm_binary.rs"));
 
 use sp_std::prelude::*;
-use sp_core::{crypto::KeyTypeId, OpaqueMetadata};
+use sp_core::{Encode, crypto::KeyTypeId, OpaqueMetadata};
 use sp_runtime::{
-	ApplyExtrinsicResult, generic, create_runtime_str, impl_opaque_keys, MultiSignature,
+	ApplyExtrinsicResult, generic, create_runtime_str, impl_opaque_keys,
+	MultiSignature, SaturatedConversion,
 	transaction_validity::{TransactionValidity, TransactionSource},
 };
 use sp_runtime::traits::{
-	BlakeTwo256, Block as BlockT, Verify, IdentifyAccount, NumberFor, Saturating,
+	self, BlakeTwo256, Block as BlockT, Verify, IdentifyAccount, NumberFor, Saturating,
 };
 use sp_api::impl_runtime_apis;
 use sp_consensus_aura::sr25519::AuthorityId as AuraId;
@@ -30,7 +31,7 @@ pub use pallet_timestamp::Call as TimestampCall;
 pub use pallet_balances::Call as BalancesCall;
 pub use sp_runtime::{Permill, Perbill};
 pub use frame_support::{
-	construct_runtime, parameter_types, StorageValue,
+	construct_runtime, debug, parameter_types, StorageValue,
 	traits::{KeyOwnerProofSystem, Randomness},
 	weights::{
 		Weight, IdentityFee,
@@ -40,6 +41,7 @@ pub use frame_support::{
 
 /// Import the template pallet.
 pub use pallet_template;
+pub use pallet_ocw_demo;
 
 /// An index to a block.
 pub type BlockNumber = u32;
@@ -266,6 +268,63 @@ impl pallet_template::Trait for Runtime {
 	type Event = Event;
 }
 
+/// For pallet-ocw-demo
+impl pallet_ocw_demo::Trait for Runtime {
+	type AuthorityId = pallet_ocw_demo::crypto::TestAuthId;
+	type Call = Call;
+	type Event = Event;
+}
+
+impl<LocalCall> frame_system::offchain::CreateSignedTransaction<LocalCall> for Runtime
+where
+	Call: From<LocalCall>,
+{
+	fn create_transaction<C: frame_system::offchain::AppCrypto<Self::Public, Self::Signature>>(
+		call: Call,
+		public: <Signature as traits::Verify>::Signer,
+		account: AccountId,
+		index: Index,
+	) -> Option<(Call, <UncheckedExtrinsic as traits::Extrinsic>::SignaturePayload)> {
+		let period = BlockHashCount::get() as u64;
+		let current_block = System::block_number()
+			.saturated_into::<u64>()
+			.saturating_sub(1);
+		let tip = 0;
+		let extra: SignedExtra = (
+			frame_system::CheckSpecVersion::<Runtime>::new(),
+			frame_system::CheckTxVersion::<Runtime>::new(),
+			frame_system::CheckGenesis::<Runtime>::new(),
+			frame_system::CheckEra::<Runtime>::from(generic::Era::mortal(period, current_block)),
+			frame_system::CheckNonce::<Runtime>::from(index),
+			frame_system::CheckWeight::<Runtime>::new(),
+			pallet_transaction_payment::ChargeTransactionPayment::<Runtime>::from(tip),
+		);
+
+		let raw_payload = SignedPayload::new(call, extra)
+			.map_err(|e| {
+				debug::warn!("SignedPayload error: {:?}", e);
+			})
+			.ok()?;
+		let signature = raw_payload.using_encoded(|payload| C::sign(payload, public))?;
+		let address = account;
+		let (call, extra, _) = raw_payload.deconstruct();
+		Some((call, (multiaddress::MultiAddress::Id(address), signature.into(), extra)))
+	}
+}
+
+impl frame_system::offchain::SigningTypes for Runtime {
+	type Public = <Signature as traits::Verify>::Signer;
+	type Signature = Signature;
+}
+
+impl<C> frame_system::offchain::SendTransactionTypes<C> for Runtime
+where
+	Call: From<C>,
+{
+	type OverarchingCall = Call;
+	type Extrinsic = UncheckedExtrinsic;
+}
+
 // Create the runtime by composing the FRAME pallets that were previously configured.
 construct_runtime!(
 	pub enum Runtime where
@@ -283,6 +342,7 @@ construct_runtime!(
 		Sudo: pallet_sudo::{Module, Call, Config<T>, Storage, Event<T>},
 		// Include the custom logic from the template pallet in the runtime.
 		TemplateModule: pallet_template::{Module, Call, Storage, Event<T>},
+		OcwDemo: pallet_ocw_demo::{Module, Call, Storage, Event<T>, ValidateUnsigned},
 	}
 );
 
@@ -309,6 +369,8 @@ pub type SignedExtra = (
 );
 /// Unchecked extrinsic type as expected by this runtime.
 pub type UncheckedExtrinsic = generic::UncheckedExtrinsic<Address, Call, Signature, SignedExtra>;
+/// The payload being signed in transactions.
+pub type SignedPayload = generic::SignedPayload<Call, SignedExtra>;
 /// Extrinsic type that has already been checked.
 pub type CheckedExtrinsic = generic::CheckedExtrinsic<AccountId, Call, SignedExtra>;
 /// Executive: handles dispatch to the various modules.
